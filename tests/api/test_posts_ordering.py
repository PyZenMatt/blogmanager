import pytest\nfrom django.utils import timezone\nfrom rest_framework.test import APIClient\nfrom blog.models import Post, Site\n\npytestmark = pytest.mark.django_db\n\n\ndef _mkpost(site, title, days_offset=0):\n    return Post.objects.create(\n        site=site,\n        title=title,\n        slug=title.lower().replace(\" \", \"-\"),\n        content=\"md\",\n        is_published=True,\n        published_at=timezone.now() + timezone.timedelta(days=days_offset),\n    )\n\n\ndef test_ordering_by_published_at_desc(api_client: APIClient):\n    site = Site.objects.create(name=\"s\", slug=\"s\")\n    older = _mkpost(site, \"older\", -2)\n    mid = _mkpost(site, \"mid\", -1)\n    newer = _mkpost(site, \"newer\", 0)\n\n    res = api_client.get(\"/api/posts/?ordering=-published_at\")\n    assert res.status_code == 200\n    results = res.json()[\"results\"]\n    slugs = [r[\"slug\"] for r in results]\n    assert slugs.index(\"newer\") < slugs.index(\"mid\") < slugs.index(\"older\")\n\n\ndef test_invalid_ordering_returns_400(api_client: APIClient):\n    res = api_client.get(\"/api/posts/?ordering=-does_not_exist\")\n    assert res.status_code == 400\n    body = res.json()\n    assert \"ordering\" in body\n    assert isinstance(body[\"ordering\"], str)\n\n\ndef test_default_ordering_desc_published_at_then_id(api_client: APIClient):\n    site = Site.objects.create(name=\"s\", slug=\"s\")\n    p1 = _mkpost(site, \"p1\", -1)\n    p2 = _mkpost(site, \"p2\", 0)\n    res = api_client.get(\"/api/posts/\")\n    assert res.status_code == 200\n    slugs = [r[\"slug\"] for r in res.json()[\"results\"]]\n    assert slugs.index(\"p2\") < slugs.index(\"p1\")\n
