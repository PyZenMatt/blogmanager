# Generated by Django 5.2.4 on 2025-08-15 21:52

import blog.models
import cloudinary_storage.storage
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Author",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("bio", models.TextField(blank=True)),
                ("slug", models.SlugField(unique=True)),
                ("meta_title", models.CharField(blank=True, max_length=70)),
                ("meta_description", models.CharField(blank=True, max_length=180)),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("slug", models.SlugField()),
                ("meta_title", models.CharField(blank=True, max_length=70)),
                ("meta_description", models.CharField(blank=True, max_length=180)),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("domain", models.URLField(unique=True)),
                ("repo_owner", models.CharField(blank=True, help_text="GitHub owner/org", max_length=100)),
                ("repo_name", models.CharField(blank=True, help_text="GitHub repo name", max_length=100)),
                ("default_branch", models.CharField(default="main", help_text="Default branch", max_length=100)),
                ("posts_dir", models.CharField(default="_posts", help_text="Directory for posts", max_length=100)),
                ("media_dir", models.CharField(default="assets/img", help_text="Directory for media", max_length=100)),
                ("base_url", models.URLField(blank=True, help_text="Base URL for published site")),
                (
                    "media_strategy",
                    models.CharField(
                        choices=[("external", "External URLs (Cloudinary/S3)"), ("commit", "Commit assets in repo")],
                        default="external",
                        help_text="How to handle post images: external URLs or commit assets in repo.",
                        max_length=20,
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("meta_title", models.CharField(blank=True, max_length=70)),
                ("meta_description", models.CharField(blank=True, max_length=180)),
                ("meta_keywords", models.CharField(blank=True, max_length=255)),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(db_collation="utf8mb4_unicode_ci", max_length=200)),
                ("content", models.TextField()),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                ("is_published", models.BooleanField(default=False)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "language",
                    models.CharField(
                        choices=[("it", "Italiano"), ("en", "English")],
                        default="it",
                        help_text="Lingua dell'articolo",
                        max_length=2,
                    ),
                ),
                (
                    "exported_hash",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default="",
                        help_text="Hash dell'export (contenuto/front matter) per rilevare cambiamenti lato Jekyll.",
                        max_length=64,
                    ),
                ),
                ("last_exported_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("draft", "Draft"), ("review", "Review"), ("published", "Published")],
                        default="draft",
                        max_length=10,
                    ),
                ),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("review_notes", models.TextField(blank=True)),
                ("seo_title", models.CharField(blank=True, max_length=200)),
                (
                    "background",
                    models.CharField(
                        blank=True,
                        default="https://res.cloudinary.com/dkoc4knvv/image/upload/v1/",
                        help_text="Incolla qui l'URL Cloudinary dell'immagine di background. Es: https://res.cloudinary.com/dkoc4knvv/image/upload/v1/â€¦",
                        max_length=200,
                    ),
                ),
                ("tags", models.TextField(blank=True, help_text="Separare i tag con virgola o newline")),
                ("description", models.TextField(blank=True)),
                ("keywords", models.TextField(blank=True, help_text="Separare le keyword con virgola o newline")),
                ("canonical_url", models.URLField(blank=True)),
                ("og_title", models.CharField(blank=True, max_length=100)),
                ("og_description", models.CharField(blank=True, max_length=200)),
                ("og_image_url", models.URLField(blank=True)),
                ("noindex", models.BooleanField(default=False)),
                (
                    "export_status",
                    models.CharField(
                        choices=[("success", "Success"), ("failed", "Failed"), ("pending", "Pending")],
                        default="pending",
                        help_text="Stato export/build",
                        max_length=16,
                    ),
                ),
                (
                    "last_pages_build_url",
                    models.URLField(
                        blank=True, help_text="URL build/errore ultima pubblicazione", max_length=255, null=True
                    ),
                ),
                (
                    "last_export_path",
                    models.CharField(
                        blank=True, help_text="Percorso ultimo file esportato su Jekyll", max_length=255, null=True
                    ),
                ),
                (
                    "repo_path",
                    models.CharField(
                        blank=True,
                        help_text="Percorso del file nel repo Jekyll (_posts/....md)",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "last_commit_sha",
                    models.CharField(
                        blank=True, help_text="SHA dell'ultimo commit di pubblicazione", max_length=64, null=True
                    ),
                ),
                (
                    "exported_at",
                    models.DateTimeField(blank=True, help_text="Timestamp dell'ultima esportazione", null=True),
                ),
                (
                    "author",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="blog.author"),
                ),
                ("categories", models.ManyToManyField(blank=True, related_name="posts", to="blog.category")),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="posts", to="blog.site"
                    ),
                ),
            ],
            options={
                "ordering": ["-published_at", "-id"],
            },
        ),
        migrations.CreateModel(
            name="ExportJob",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("exported_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("commit_sha", models.CharField(blank=True, max_length=64, null=True)),
                ("repo_url", models.URLField(blank=True, max_length=255, null=True)),
                ("branch", models.CharField(blank=True, max_length=64, null=True)),
                ("path", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "export_status",
                    models.CharField(
                        choices=[("success", "Success"), ("failed", "Failed"), ("pending", "Pending")],
                        default="pending",
                        max_length=16,
                    ),
                ),
                ("export_error", models.TextField(blank=True, null=True)),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="export_jobs", to="blog.post"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("author_name", models.CharField(max_length=100)),
                ("author_email", models.EmailField(max_length=254)),
                ("text", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="comments", to="blog.post"
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="PostImage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "image",
                    models.ImageField(
                        storage=cloudinary_storage.storage.MediaCloudinaryStorage(),
                        upload_to=blog.models.upload_to_post_image,
                    ),
                ),
                ("caption", models.CharField(blank=True, max_length=200)),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="images", to="blog.post"
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.AddField(
            model_name="category",
            name="site",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="categories", to="blog.site"
            ),
        ),
        migrations.AddField(
            model_name="author",
            name="site",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="authors", to="blog.site"
            ),
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(max_length=100, unique=True)),
                ("posts", models.ManyToManyField(blank=True, related_name="tagged_posts", to="blog.post")),
            ],
            options={
                "ordering": ["slug"],
            },
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(fields=["site", "slug"], name="blog_post_site_id_a32762_idx"),
        ),
        migrations.AddConstraint(
            model_name="post",
            constraint=models.UniqueConstraint(fields=("site", "slug"), name="uniq_site_slug"),
        ),
        migrations.AddIndex(
            model_name="category",
            index=models.Index(fields=["site", "slug"], name="blog_catego_site_id_69b4ec_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="category",
            unique_together={("site", "slug")},
        ),
    ]
